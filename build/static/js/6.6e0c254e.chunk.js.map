{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","components/pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","entering","setentering","authorInputRef","useRef","textInputRef","when","message","form","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","required","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCoE/BC,EAhEG,SAACL,GACjB,MAAgCM,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACE,eAAC,WAAD,WACE,cAAC,SAAD,CACEE,KAAML,EACNM,QAAS,iBACP,mFAIJ,cAAC,EAAD,UACE,uBACEZ,UAAWC,IAAQY,KACnBC,QApBmB,WACzBP,GAAY,IAoBNQ,SAhCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBV,EAAeW,QAAQC,MACvCC,EAAcX,EAAaS,QAAQC,MAIzCrB,EAAMuB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAqB5C,UAKGtB,EAAM0B,WACL,qBAAKzB,UAAWC,IAAQyB,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK3B,UAAWC,IAAQ2B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKxB,EAAgByB,UAAQ,OAE9D,sBAAKjC,UAAWC,IAAQ2B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOG,KAAK,IAAIF,IAAKtB,EAAcuB,UAAQ,OAE1D,qBAAKjC,UAAWC,IAAQkC,QAAxB,SACE,wBAAQnC,UAAU,MAAMoC,QAlCV,WACtB7B,GAAY,IAiCJ,kC,gBCnCG8B,UApBE,WACf,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,uBAEhBC,qBAAU,WAIR,MAHe,cAAXH,GACFC,EAAQG,KAAK,WAER,eACN,CAACJ,EAAQC,IAMZ,OACE,cAAC,EAAD,CAAWjB,UAAsB,YAAXgB,EAAsBnB,WALtB,SAACwB,GACvBN,EAAYM","file":"static/js/6.6e0c254e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3SlWR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__1QKzi\",\"loading\":\"QuoteForm_loading__2f7nc\",\"control\":\"QuoteForm_control__xqG1Q\",\"actions\":\"QuoteForm_actions__AgxIj\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from \"react\";\r\nimport { Prompt } from \"react-router\";\r\n\r\nimport Card from \"../UI/Card\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport classes from \"./QuoteForm.module.css\";\r\n\r\nconst QuoteForm = (props) => {\r\n  const [entering, setentering] = useState(false);\r\n  const authorInputRef = useRef();\r\n  const textInputRef = useRef();\r\n\r\n  function submitFormHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const enteredAuthor = authorInputRef.current.value;\r\n    const enteredText = textInputRef.current.value;\r\n\r\n    // optional: Could validate here\r\n\r\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\r\n  }\r\n\r\n  const formFocusedHandler = () => {\r\n    setentering(true);\r\n  };\r\n\r\n  const enteringHandler = () => {\r\n    setentering(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Prompt\r\n        when={entering}\r\n        message={() =>\r\n          \"Are you sure you want to leave this page? All your entered data will be lost!\"\r\n        }\r\n      />\r\n\r\n      <Card>\r\n        <form\r\n          className={classes.form}\r\n          onFocus={formFocusedHandler}\r\n          onSubmit={submitFormHandler}\r\n        >\r\n          {props.isLoading && (\r\n            <div className={classes.loading}>\r\n              <LoadingSpinner />\r\n            </div>\r\n          )}\r\n\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"author\">Author</label>\r\n            <input type=\"text\" id=\"author\" ref={authorInputRef} required />\r\n          </div>\r\n          <div className={classes.control}>\r\n            <label htmlFor=\"text\">Text</label>\r\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef} required></textarea>\r\n          </div>\r\n          <div className={classes.actions}>\r\n            <button className=\"btn\" onClick={enteringHandler}>\r\n              Add Quote\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteForm;\r\n","import { useHistory } from \"react-router\";\r\nimport QuoteForm from \"../quotes/QuoteForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst NewQuote = () => {\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/quotes\");\r\n    }\r\n    return () => {};\r\n  }, [status, history]);\r\n\r\n  const addQuoteHandler = (quoteData) => {\r\n    sendRequest(quoteData);\r\n  };\r\n\r\n  return (\r\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={addQuoteHandler} />\r\n  );\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}