{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","control","htmlFor","id","rows","ref","required","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","LoadingSpinner","length","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,MAAQ,kC,mBCA1BD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,iFCUdC,EATU,SAACC,GACxB,OACE,yBAAQC,UAAWC,IAAQC,MAA3B,UACE,4BAAIH,EAAMI,OACV,qCAAaJ,EAAMK,a,0DC0CVC,EA1CQ,SAACN,GACtB,IAAMO,EAAiBC,mBACvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MACrBC,EAAmBd,EAAnBc,eAERC,qBAAU,WAIR,MAHe,cAAXH,GAA2BC,GAC7BC,IAEK,eACN,CAACF,EAAQC,EAAOC,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBACN,IAAMC,EAAcZ,EAAea,QAAQC,MAE3CV,EAAY,CAAEW,YAAa,CAAElB,KAAMe,GAAeI,QAASvB,EAAMuB,WAGnE,OACE,uBAAMtB,UAAWC,IAAQsB,KAAMC,SAAUT,EAAzC,UACc,YAAXJ,GACC,qBAAKX,UAAU,WAAf,SACE,qDAGJ,sBAAKA,UAAWC,IAAQwB,QAASD,SAAUT,EAA3C,UACE,uBAAOW,QAAQ,UAAf,0BACA,0BACEC,GAAG,UACHC,KAAK,IACLC,IAAKvB,EACLwB,UAAQ,OAGZ,qBAAK9B,UAAWC,IAAQ8B,QAAxB,SACE,wBAAQ/B,UAAU,MAAlB,+B,yBChCOgC,EARK,SAACjC,GACnB,OACE,oBAAIC,UAAWC,IAAQgC,KAAvB,SACE,4BAAIlC,EAAMI,U,iBCQD+B,EAVM,SAACnC,GACpB,OACE,oBAAIC,UAAWC,IAAQkC,SAAvB,SACGpC,EAAMoC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BlC,KAAMkC,EAAQlC,MAA1BkC,EAAQV,UCiEnBW,EA9DE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACMC,EAASC,sBACf,EAAsDnC,YAAQoC,KAAtDlC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAckC,EAAnC,EAA6BC,KAErBxB,EAAYoB,EAAZpB,QAERR,qBAAU,WAER,OADAJ,EAAYY,GACL,eAGN,CAACZ,EAAaY,IAEjB,IASIe,EALEU,EAAsBC,uBAAY,WACtCtC,EAAYY,GACZmB,GAAmB,KAClB,CAAC/B,EAAaY,IAsBjB,MAlBe,YAAXX,IACF0B,EACE,qBAAKrC,UAAU,WAAf,SACE,cAACiD,EAAA,EAAD,OAKS,cAAXtC,GAA0BkC,GAAkBA,EAAeK,OAAS,IACtEb,EAAU,cAAC,EAAD,CAAcF,SAAUU,KAIvB,cAAXlC,GACEkC,GAA4C,IAA1BA,EAAeK,SAEnCb,EAAU,mBAAGrC,UAAU,WAAb,0CAGV,0BAASA,UAAWC,IAAQkC,SAA5B,UACE,gDACEK,GACA,wBAAQxC,UAAU,MAAMmD,QAjCC,WAC7BV,GAAmB,IAgCf,2BAIDD,GACC,cAAC,EAAD,CACElB,QAASoB,EAAOpB,QAChBT,eAAgBkC,IAGnBV,M,OCKQe,UAjDK,WAClB,IAAMV,EAASC,sBACTU,EAAQC,0BAEd,EAA0D9C,YACxD+C,KACA,GAFM7C,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAc6C,EAAnC,EAA6BV,KAAmBlC,EAAhD,EAAgDA,MAKxCU,EAAYoB,EAAZpB,QAOR,OALAR,qBAAU,WAER,OADAJ,EAAYY,GACL,eACN,CAACZ,EAAaY,IAEF,YAAXX,EAEA,qBAAKX,UAAU,WAAf,SACE,cAACiD,EAAA,EAAD,MAKFrC,EACK,mBAAGZ,UAAU,WAAb,SAAyBY,IAG7B4C,EAAYrD,KAKf,eAAC,WAAD,WACE,cAAC,EAAD,CAAiBA,KAAMqD,EAAYrD,KAAMC,OAAQoD,EAAYpD,SAC7D,cAAC,QAAD,CAAOqD,KAAMJ,EAAMI,KAAMC,OAAK,EAA9B,SACE,qBAAK1D,UAAU,WAAf,SACE,cAAC,IAAD,CAAMA,UAAU,YAAY2D,GAAE,UAAKN,EAAMO,IAAX,aAA9B,+BAKJ,cAAC,QAAD,CAAOH,KAAI,UAAKJ,EAAMI,KAAX,aAAX,SACE,cAAC,EAAD,SAdG","file":"static/js/4.6502179b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__22Wxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1Xqee\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__20mL9\",\"loading\":\"NewCommentForm_loading__2bLeE\",\"control\":\"NewCommentForm_control__1NLEt\",\"actions\":\"NewCommentForm_actions__IPkmD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__xG07u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__JtSnW\"};","import classes from \"./HighlightedQuote.module.css\";\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect, useRef } from \"react\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addComment } from \"../lib/api\";\r\n\r\nimport classes from \"./NewCommentForm.module.css\";\r\n\r\nconst NewCommentForm = (props) => {\r\n  const commentTextRef = useRef();\r\n  const { sendRequest, status, error } = useHttp(addComment);\r\n  const { onAddedComment } = props;\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\" && !error) {\r\n      onAddedComment();\r\n    }\r\n    return () => {};\r\n  }, [status, error, onAddedComment]);\r\n\r\n  const submitFormHandler = (event) => {\r\n    event.preventDefault();\r\n    const enteredText = commentTextRef.current.value;\r\n\r\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={submitFormHandler}>\r\n      {status === \"pending\" && (\r\n        <div className=\"centered\">\r\n          <p>Loading comment...</p>\r\n        </div>\r\n      )}\r\n      <div className={classes.control} onSubmit={submitFormHandler}>\r\n        <label htmlFor=\"comment\">Your Comment</label>\r\n        <textarea\r\n          id=\"comment\"\r\n          rows=\"5\"\r\n          ref={commentTextRef}\r\n          required\r\n        ></textarea>\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button className=\"btn\">Add Comment</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewCommentForm;\r\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\n\r\nimport classes from \"./Comments.module.css\";\r\nimport NewCommentForm from \"./NewCommentForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllComments } from \"../lib/api\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport CommentsList from \"../comments/CommentsList\";\r\n\r\nconst Comments = () => {\r\n  const [isAddingComment, setIsAddingComment] = useState(false);\r\n  const params = useParams();\r\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\r\n\r\n  const { quoteId } = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n    return () => {\r\n      // cleanup;\r\n    };\r\n  }, [sendRequest, quoteId]);\r\n\r\n  const startAddCommentHandler = () => {\r\n    setIsAddingComment(true);\r\n  };\r\n\r\n  const addedCommentHandler = useCallback(() => {\r\n    sendRequest(quoteId);\r\n    setIsAddingComment(false);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  let comment;\r\n\r\n  if (status === \"pending\") {\r\n    comment = (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\r\n    comment = <CommentsList comments={loadedComments} />;\r\n  }\r\n\r\n  if (\r\n    status === \"completed\" &&\r\n    (!loadedComments || loadedComments.length === 0)\r\n  ) {\r\n    comment = <p className=\"centered\">No comments were added yet!</p>;\r\n  }\r\n  return (\r\n    <section className={classes.comments}>\r\n      <h2>User Comments</h2>\r\n      {!isAddingComment && (\r\n        <button className=\"btn\" onClick={startAddCommentHandler}>\r\n          Add a Comment\r\n        </button>\r\n      )}\r\n      {isAddingComment && (\r\n        <NewCommentForm\r\n          quoteId={params.quoteId}\r\n          onAddedComment={addedCommentHandler}\r\n        />\r\n      )}\r\n      {comment}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","import { Fragment, useEffect } from \"react\";\r\nimport { Route, useParams, useRouteMatch } from \"react-router\";\r\n\r\nimport HighligtedQuote from \"../quotes/HighlightedQuote\";\r\nimport Comments from \"../comments/Comments\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\n// const data = [\r\n//   {\r\n//     id: \"1\",\r\n//     author: \"Max\",\r\n//     text: \"Learning React is fun!\",\r\n//   },\r\n//   {\r\n//     id: \"2\",\r\n//     author: \"Matemannd\",\r\n//     text: \"Learning React is sdfsdfds!\",\r\n//   },\r\n// ];\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(\r\n    getSingleQuote,\r\n    true\r\n  );\r\n\r\n  const { quoteId } = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n    return () => {};\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighligtedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}